const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
const {History, User, NodeObj, Decision, UserHistoryObj, Room, MyRoom} = require('./models');
const jsonfile = require('jsonfile');
const chalk = require('chalk');
require('dotenv').config()
const { 
  debug, 
  debugSome, 
  findAndReturn,
  checkMessageRouter,
  prepareKeyboard,
  endPointHandler,
  prepareEndPointStr
} = require('./helpers');


const keyboards = require('./keyboards');
const kb = require('./keyboard_btns');

const log = console.log;
const cLog = pass => log(chalk.blue.bgRed.bold(pass));

main().catch(err => console.log(err));

// ================================================================

async function main() {
  await mongoose.connect(process.env.DATABASE_URL);
  if(mongoose.connection) {
    console.log('Success connect')
  }
  
  // use `await mongoose.connect('mongodb://user:password@127.0.0.1:27017/test');` if your database has auth enabled
}

// const testHistory = History({
//   name: "–ü—Ä–æ–±–Ω–∏—á–µ–∫",
//   unique_name: "–ü—Ä–æ–±–Ω–∏—á–µ–∫001",
//   language_code: "ru",
//   comment: "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –≤—Å–µ –≤ —Å–µ—Ä—å—ë–∑ üòÖ",
// });

// testHistory.save().then(data => {
//   log(chalk.blue.bgRed.bold('Success save'))
// })



// Vendor.deleteMany().then(() => {
//   // console.log("DeleteMany");
//   console.log("start working with json");
//   const file = path.join(__dirname, '..', 'mac-vendors-export.json');
//   fs.readFile(file, (err, data) => {
//     // console.log(JSON.parse(data));
//     const dataObj = JSON.parse(data);
    
//     const saveAll = i => {
//       if(i < dataObj.length) {
//         const vendor = new Vendor(dataObj[i]);
//         vendor.save().then(() => {
//           saveAll(i+1);
//         });

//       }
//     }
//     saveAll(0);
    
//     console.log('success save');
//   })
// })

// ================================================================

const bot = new TelegramBot(process.env.TELEGRAM_BOT_KEY, {
  polling: {
    interval: 300, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    autoStart: true, // –ë–æ—Ç –±—ã–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ –µ–º—É –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ -> –æ–Ω –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    params: {
      timeout: 10 // –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
  }
})

bot.onText(/\/money/, message => {
  bot.sendPhoto(message.chat.id, fs.readFileSync(__dirname+'/cute.jpg'), {
    caption: "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ... üéÉüëë‚ô†üí¢ ",  
    parse_mode: 'Markdown'
  });
  // bot.sendPhoto(message.chat.id, './gumboll_emoji.jpg');
})

bot.onText(/\/start/, async message => {
  const {id: chatId} = message.chat
  const text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${message.from.first_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.`;
  bot.sendMessage(chatId, text, {
    reply_markup: {
      keyboard: keyboards.origin,
      resize_keyboard:true,
    }
  });
  if(!message.from.hasOwnProperty('username')) {
    bot.sendMessage(chatId, "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram");
    return
  }

  const { from: {first_name, username, language_code} } = message;
  debugger
  const user = await User.findOne({username}).populate(['histories']);
  if(!user) {
    const newUser = User({
      username,
      first_name,
      chatId,
      language_code,
      currentHistory: 'null',
      histories: [],
    });

    newUser.save()
    .then(() => log(chalk.blue.bgRed.bold('Success save')))
    .catch(er => console.log("Mongo err: ", er));
  } else {
    // develop mode
    const workHis = findAndReturn(user.histories, 'history_id', user.currentHistory);
    await UserHistoryObj.updateOne({_id: workHis._id}, 
      {
        current_pos: ''
      });
    // develop mode end

    user.currentHistory = 'null';
    user.save()
    .catch(er => console.log("Mongo err: ", er));
  }


  // const firstHistory = History({
  //   name: '–ü—Ä–æ–±–Ω–∏—á–µ–∫',
  //   unique_name: '–ü—Ä–æ–±–Ω–∏—á–µ–∫',
  //   language_code: 'RU', 
  //   comment: '–ù–∏—á–µ–≥–æ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ, –ª–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —á—Ç–æ–±—ã —Ä–∞–∑–≤–ª–µ—á—å—Å—è –∏ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å —Ç–µ–º–∏ –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –∏—â–∏—Ç–µ'
  // })
  // const historySave = await firstHistory.save();
  // console.log("historySave ", debug(historySave));

  // const fh = await History.findOne({unique_name: '–ü—Ä–æ–±–Ω–∏—á–µ–∫'}).populate(['zero_node'])

  // const zero_node = NodeObj({
  //   historyId: fh._id,
  //   text: '–ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?',
  //   decisions:[]
  // });

  // const zero_node_save = await zero_node.save();
  // log('zero_node_save', debug(zero_node_save));

  // zero_node.save().then(data => {
  //   log(chalk.blue.bgRed.bold('Success save'))
  // })

  // const zero_node_id = '6541299d9c3d5abf96bd239d';

  // History.updateOne({'_id': '6541276de41a1b250a61b756'}, {zero_node: zero_node_id})
  //   .then(() => log(chalk.blue.bgRed.bold('Success update')));

  // const newDecision = Decision(
  //   {
  //     comment: '–£ –º–µ–Ω—è –ø—Ä–∏–ª–∏–≤ —Å–∏–ª –∏ —è —Ö–æ—á—É —ç—Ç–æ —Å –∫–µ–º —Ç–æ –æ–±—Å—É–¥–∏—Ç—å',
  //     index: 1,
  //   }
  // )
  // newDecision.save().then(() => log(chalk.blue.bgRed.bold('Success save')));

  // const d1 = '65412d3eb223a4dc3182855e';
  // const d2 = '65412d5c7919474e1d0dde43';
  // NodeObj.updateOne({'_id': '6541299d9c3d5abf96bd239d'}, {decisions: [d1, d2]})
  //   .then(() => log(chalk.blue.bgRed.bold('Success update')));
  const initDec = await Decision.find({nextNodeObj: '6544f75b383737d1e8b03369'})
})

bot.onText(/\/dev/, async message => {
  if(message.from.username !== 'Den1Lay') return;
  console.log('show')
  const {id: chatId} = message.chat;
  History.find().populate(['zero_node']).then(data => {
    console.log(' History.find().populate([zero_node]) ', data);
  })
  .catch(er => log("Error: ", er));

  await bot.sendMessage(chatId, ''+(new mongoose.Types.ObjectId()), {
    reply_markup: {
      keyboard: keyboards.origin,
      resize_keyboard:true,
    }
  });
  
  const id_now = '6547b346263e7efed3d9474c'; // node id –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è
  const id_next = '6547b9377e5f075443f41a00'; // node id –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ö–æ–¥—è—Ç—Å—è

  // const commentData = [
  //   "–ú–æ–≥–ª–æ –±—ã–ª–æ –±—ã—Ç—å –∏ –ª—É—á—à–µ",
  //   "–£ –º–µ–Ω—è –ø—Ä–∏–ª–∏–≤ —Å–∏–ª –∏ —è —Ö–æ—á—É —ç—Ç–æ —Å –∫–µ–º —Ç–æ –æ–±—Å—É–¥–∏—Ç—å"
  // ];
  const commentData = [
    `–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞ –Ω–µ –Ω–∞–¥–æ–µ—Å—Ç)`, 
    '–Ø –∏—â—É —Å—É–ø–µ—Ä —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π ', 
    '–ú–Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ',
    '–ë–æ–ª—å—à–µ —Ä–æ–º–∞–Ω—Ç–∏–∫–∏',
  ]
  const decisionAr = commentData.map((el, i) => {
    return Decision(
      {
        comment: el,
        index: i,
        nextNodeObj: id_next,
      }
    )
  });
  
  const decisionSave =  new Promise((resolve, reject) => {
    const saveAll = (arr, i) => {
      if(i < arr.length) {
        arr[i].save().then(() => {
          saveAll(arr, i+1);
        }).catch(er => reject(er));
      } else {
        resolve()
      }
    }
    saveAll(decisionAr, 0);
  }).then(() => {
    // save nodeObj
    const zero_node = NodeObj({
      _id: id_now,
      historyId: '6544f3939c8f1881fd48aea7',
      text: '–ß–µ–≥–æ —Ç—ã –∂–¥–µ—à—å –æ—Ç –æ–±—â–µ–Ω–∏—è?',
      decisions:decisionAr.map(({_id}) => _id)
    });
    zero_node.save().then(() => log(chalk.blue.bgRed.bold('COMPLETE SAVE NODE')));
  }).catch(er => {
    console.log('SAVE ERROR', er)
  })

  
});

bot.onText(/\/file/, message => {
  const {id: chatId} = message.chat;
  bot.sendMessage('1387493009', "–Ø –ø–æ–∫–∞ —Ö–∑, —á—Ç–æ —Ç—ã –º–Ω–µ –ø–∏—à–µ—à—å...");
});

bot.on('message', async (message) => {
  const {id: chatId } = message.chat;
  
  // need to check another passes
  // –ï—â–µ –Ω—É–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–æ–º–µ—Ä–∞–º –∞ –∏–Ω–∞—á–µ —Å–∫–∏–ø
  // –ï—â–µ –Ω—É–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≥–∏—Ñ–∫–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –ø—Ä–æ—á–µ–µ, –ø—Ä–æ—á–µ–µ...

  const username = message.from.username;
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤
  const userData = await User.findOne({username}).populate(['histories', 'myRooms']);

  if(userData && userData.currentHistory !== 'null') {
    if(checkMessageRouter(message.text)) return;
    const chooseInd = message.text[0];
    // –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ UserHistoryObj

    const workHis = findAndReturn(userData.histories, 'history_id', userData.currentHistory);

    const currentNodeObj = await NodeObj.findById(workHis.linkToNearNodeObj).populate(['decisions']);
    if(!currentNodeObj) return;

    const { nextNodeObj } = findAndReturn(currentNodeObj.decisions, 'index', chooseInd)
    
    
    await UserHistoryObj.updateOne({_id: workHis._id}, 
      {
        current_pos: workHis.current_pos+chooseInd,
        linkToNearNodeObj: nextNodeObj
      });
      
    // Get data for new keyboard
    const newNodeObj = await NodeObj.findById(nextNodeObj).populate(['decisions']);
    
    if(newNodeObj) {
      // show new keyboard
      // next step in test
      const keyboard = prepareKeyboard(newNodeObj.decisions);
      bot.sendMessage(chatId, newNodeObj.text, {
        reply_markup: {
          keyboard,
          resize_keyboard:true,
        }
      });
    } else {
      // end point
      // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã, –∑–∞–ø–∏—Å—å –≤ –∫–æ–º–Ω–∞—Ç—É
      const {workRoom: preRoomData, newMyRoomObj} = await endPointHandler({bot, chatId, userData, pos: workHis.current_pos+chooseInd })
      // const roomData = await Room.findOne({unique_name}).populate(['members']);
      const roomData = await preRoomData.populate(['members']);
      const usersMyRooms = await MyRoom.find({room_id: roomData._id}).populate(['user_id']);

      const {str: resStr, noti} = prepareEndPointStr({roomData, userData, usersMyRooms});
      const { visible, notification } = newMyRoomObj;
      debugger
      const msgData = await bot.sendMessage(chatId, "(‚åê‚ñ†_‚ñ†)", {
        reply_markup: {
          remove_keyboard: true
        }
      })
      await bot.deleteMessage(msgData.chat.id, msgData.message_id);
      await bot.sendMessage(chatId, resStr, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: visible ? '–°–¥–µ–ª–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–º' : '–°–¥–µ–ª–∞—Ç—å –≤–∏–¥–∏–º—ã–º',
                callback_data: 'endp'+'invs'+(visible ? 'off' : 'onn'),
              }
            ],
            [
              {
                text: notification ? '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                callback_data: 'endp'+'noot'+(notification ? 'off' : 'onn'),
              }
            ],
          ]
        },
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      });

      await new Promise((resolve, reject) => {
        // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const sendNotification = (arr, i) => {
          if(i < arr.length) {
            bot.sendMessage(arr[i].chatId, "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ (¬¨‚Äø¬¨)", {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–°–º–æ—Ç—Ä–µ—Ç—å",
                      callback_data: 'endp'+'invs'+'onn'
                    }
                  ]
                ]
              }
            }).then(() => {
              sendNotification(arr, i+1);
            })
          } else {
            resolve()
          }
        }
        // resolve();
        sendNotification(noti, 0);
      })
      log('noti', noti);
    }
    

    
    // cLog('success index handler');


    return
  }
  

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
  switch(message.text) {
    case kb.back:
      bot.sendMessage(chatId, '–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é', {
        reply_markup: {
          keyboard: keyboards.origin,
          resize_keyboard:true,
        }
      })
      break
    case kb.origin.info:
      const str = `
      –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –±–æ—Ç–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –í–∞—Å —á–µ–ª–æ–≤–µ–∫–∞ —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—â–∞—Ç—å—Å—è.\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –∏–∑ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.\n–õ—é–¥–∏, –æ—Ç–≤–µ—Ç–∏–≤—à–∏–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ, –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –æ–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –í—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞—á–Ω–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç, —Ç–æ –í—ã –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ 2—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ä–∞–∑–Ω—ã–º —Ç–µ—Å—Ç–∞–º. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–∫—É "–ö —Ç–µ—Å—Ç–∞–º"`
      
      bot.sendMessage(chatId, str, {
        reply_markup: {
          keyboard: keyboards.origin,
          resize_keyboard:true,
        }
      })
      break
    case kb.origin.toTests:
      History.find().populate(['zero_node']).then(data => {
        const { _id, name, comment, zero_node } = data[0];
        const resText = `${name}\n${comment}`

        bot.sendMessage(chatId, resText, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–ü–µ—Ä–µ–π—Ç–∏',
                  callback_data: 'prev'+_id,
                }
              ],
            ]
          }
        });
      });
      break
  }
  
})

bot.on('callback_query', async query => {
  const {id: chatId} = query.message.chat;
  const pre = query.data.slice(0, 4);
  query.data = query.data.slice(4);

  let user = await User.findOne({username: query.from.username}).populate(['histories', 'myRooms']);

  if (pre === 'prev') {
  
  const { zero_node } = await History.findById(query.data);
  if(!debugSome(user.histories, ({history_id}) => ''+history_id === query.data)) {

    const uHO = UserHistoryObj(
      {
        history_id: query.data, 
        current_pos: '', 
        linkToNearNodeObj: zero_node,
      });
    await uHO.save();
    user.histories = [...user.histories, uHO._id]; 
  } else {
    const {_id} = findAndReturn(user.histories, 'history_id', query.data);
    await UserHistoryObj.updateOne({_id}, {linkToNearNodeObj: zero_node, current_pos: ''});
  }

  log('user  ', user);
  // –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —á–∏—Å—Ç–∫—É –ø–æ myRooms
  // 
  const myRoomObj = findAndReturn(user.myRooms, 'history_id', query.data);
  if(myRoomObj) {
    // –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
    // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Room.members
    const room = await Room.findById(myRoomObj.room_id);
    let userInd = -1;
    room.members.forEach((el, i) => {if(''+el === ''+user._id) {userInd = i}});
    if(userInd > -1) {
      room.members.splice(userInd, 1);
    }
    await room.save();
    // —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –º—É—Å–æ—Ä
    await MyRoom.findByIdAndDelete(myRoomObj._id);

    let myRoomObjInd = -1;
    user.myRooms.forEach(({history_id}, i) => {if(''+history_id === ''+query.data) {myRoomObjInd = i}});
    if(myRoomObjInd > -1) {
      user.myRooms.splice(myRoomObjInd, 1);
    }
  }

  // –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  user.currentHistory = query.data;
  user.chatId = chatId;
  
  user.save()
    .then(() => {
      History.findById(query.data).then(data => {
        
        NodeObj.findById(data.zero_node)
          .populate(['decisions'])
          .then((data) => {
            
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            const passMsg = `–ß–∞—Ç –Ω–∞—á–∞–ª—Å—è\n${data.text}`;

            const keyboard = prepareKeyboard(data.decisions.reverse());
            bot.sendMessage(chatId, passMsg, {
              reply_markup: {
                keyboard,
                resize_keyboard:true,
              }
            });
          })
        
      })

      
    })
  // bot.answerCallbackQuery(query.id, `${query.data}`);
  // bot.sendMessage(query.message.chat.id, debug(query));
  }


  if(pre === 'endp'){
    // endpoints moves
    const flag = query.data.slice(0, 4);
    const payload = query.data.slice(4);
    log('endp data: ', flag, payload);
    debugger
    const workMyRoom = findAndReturn(user.myRooms, 'history_id', user.currentHistory);

    const isTrue = payload === 'onn'
    const isInvi = flag === 'invs' 
    const newMyRoomObj = await MyRoom.findById(workMyRoom._id);
    newMyRoomObj.visible = isInvi ? isTrue : newMyRoomObj.visible;
    newMyRoomObj.notification = isInvi ? newMyRoomObj.notification : isTrue;
    await newMyRoomObj.save();
    debugger
    const roomData = await Room.findById(workMyRoom.room_id).populate(['members']);
    const usersMyRooms = await MyRoom.find({room_id: roomData._id});
    const {str: resStr} = prepareEndPointStr({roomData, userData:user, usersMyRooms
    });
    const { visible, notification } = newMyRoomObj;

    bot.sendMessage(chatId, resStr, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: visible ? '–°–¥–µ–ª–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–º' : '–°–¥–µ–ª–∞—Ç—å –≤–∏–¥–∏–º—ã–º',
              callback_data: 'endp'+'invs'+(visible ? 'off' : 'onn'),
            }
          ],
          [
            {
              text: notification ? '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
              callback_data: 'endp'+'noot'+(notification ? 'off' : 'onn'),
            }
          ]
        ]
      },
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
    });

    // 
  }
  
})